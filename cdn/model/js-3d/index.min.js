'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var js3dModelCdnUrl = '/cdn/model/js-3d/';
var js3dModelImg01 = js3dModelCdnUrl + 'images/01.png';
var js3dModelImgPkq = js3dModelCdnUrl + 'images/pkq.jpg';
var js3dModelObjPkq = js3dModelCdnUrl + 'obj/pkq.obj';

var js3dModel = {
    // 图片列表
    imgsArr: [],

    // 图片加载
    imgLoad: function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
            var pArr, res;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            pArr = [];

                            this.imgsArr.forEach(function (item) {
                                var p = new Promise(function (reslove) {
                                    var img = new Image();
                                    img.src = item;
                                    img.onload = function () {
                                        reslove(img);
                                    };
                                });
                                pArr.push(p);
                            });
                            _context.next = 4;
                            return Promise.all(pArr);

                        case 4:
                            res = _context.sent;
                            return _context.abrupt('return', res);

                        case 6:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));

        function imgLoad() {
            return _ref.apply(this, arguments);
        }

        return imgLoad;
    }(),

    //模型加载
    modelLoad: function modelLoad(props) {
        var THREE = props.THREE,
            TWEEN = props.TWEEN,
            OrbitControls = props.OrbitControls,
            OBJLoader = props.OBJLoader;

        var el = document.getElementById('content');
        var winWidth = window.innerWidth;
        var winHeight = window.innerHeight;
        el.style.cssText = 'width:' + winWidth + 'px;height:' + winHeight + 'px';

        // 相机
        var camera = new THREE.PerspectiveCamera(20, winWidth / winHeight, 0.1, 1000);
        // 设置相机坐标
        camera.position.set(150, 50, 300); // 侧面
        // camera.position.set(0, 50, 300); // 正面

        // 渲染器
        var renderer = new THREE.WebGLRenderer({
            antialias: true,
            alpha: true
        });

        // 设置渲染器的颜色和大小
        renderer.setClearColor('#000');
        // renderer.setClearAlpha(0);
        renderer.setSize(winWidth, winHeight);
        renderer.setPixelRatio(window.devicePixelRatio); // 高清设置

        // 将renderer（渲染器）的dom元素（renderer.domElement）添加到我们的HTML文档中。
        // 这就是渲染器用来显示场景给我们看的<canvas>元素
        document.body.appendChild(renderer.domElement);

        // 鼠标控制旋转
        var orbitControls = new OrbitControls(camera, renderer.domElement);
        // orbitControls.autoRotate = false;
        // orbitControls.enableZoom = false;
        // orbitControls.minDistance = 200; // 最大缩放值，值越小模型越大
        orbitControls.maxDistance = 500; // 最小缩放值，值越大模型越小
        orbitControls.maxPolarAngle = Math.PI * 0.5; // 限制鼠标拖拽角度
        orbitControls.enablePan = false; // 禁止鼠标右键拖拽

        // 场景
        var scene = new THREE.Scene();

        // ------------------------------------------- 3d模型搭建 start---------------------------------------------
        var bodyPositiveTexture = new THREE.TextureLoader().load(js3dModelImg01);

        bodyPositiveTexture.repeat.set(1, 1);
        bodyPositiveTexture.wrapS = THREE.RepeatWrapping;
        bodyPositiveTexture.wrapT = THREE.RepeatWrapping;
        var bodyPositiveMaterial = new THREE.MeshLambertMaterial({
            map: bodyPositiveTexture,
            transparent: true,
            opacity: 0.8
        });

        var whiteBoxGeometry = new THREE.BoxGeometry(10, 10, 10);
        var whiteMesh = new THREE.Mesh(whiteBoxGeometry, bodyPositiveMaterial);
        whiteMesh.name = '白色立方体';
        scene.add(whiteMesh);

        // 导入obj模型
        var objLoader = new OBJLoader();
        objLoader.load(js3dModelObjPkq, function (object) {
            // 设置模型缩放比例
            object.scale.set(1, 1, 1);
            // 设置模型的坐标
            object.position.set(0, 10, 0);

            object.traverse(function (child) {
                if (child.isMesh) {
                    // console.log(child.material);
                    // 设置模型皮肤
                    child.material.map = new THREE.TextureLoader().load(js3dModelImgPkq);
                    child.material.name = '皮卡丘';
                }
            });

            // 将模型添加到场景中
            scene.add(object);
        });

        // ------------------------------------------- 3d模型搭建 end---------------------------------------------

        // 元素点击事件
        var raycaster = new THREE.Raycaster();
        var mouse = new THREE.Vector2();
        // 点击更改颜色
        renderer.domElement.onclick = function (event) {
            mouse.x = event.clientX / window.innerWidth * 2 - 1;
            mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
            raycaster.setFromCamera(mouse, camera);
            var intersects = raycaster.intersectObjects(scene.children, true);
            console.log(intersects);
            if (intersects.length > 0) {
                intersects.forEach(function (item) {
                    if (item.object.name === '白色立方体') {
                        window.ddddd(item.object.name);
                    } else if (item.object.material.name === '皮卡丘') {
                        window.ddddd(item.object.material.name);
                    }
                });
            }
        };

        // 设置光源
        var light = new THREE.DirectionalLight('#ffffff', 0.5);
        light.position.set(400, 200, 300);
        scene.add(light);
        scene.add(new THREE.AmbientLight('#ffffff', 0.5));

        // 亮光光源映射
        var pointLight = new THREE.PointLight('#ffffff', 1, 100);
        pointLight.position.set(10, 10, 10);
        scene.add(pointLight);

        // 添加渲染元素
        el.append(renderer.domElement);

        function render() {
            // 动画循环渲染
            requestAnimationFrame(render);
            // 渲染到页面上
            renderer.render(scene, camera);

            TWEEN.update();
        }
        render();

        // onresize 事件会在窗口被调整大小时发生
        window.onresize = function () {
            var newWindowWidth = window.innerWidth;
            var newWindowHeight = window.innerHeight;
            el.style.cssText = 'width:' + newWindowWidth + ';height:' + newWindowHeight;
            renderer.setSize(newWindowWidth, newWindowHeight);
            camera.aspect = newWindowWidth / newWindowHeight;
            camera.updateProjectionMatrix();
        };
    },

    // paramsObj 包含了此函数里需要的对象
    init: function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(props) {
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            _context2.next = 2;
                            return this.imgLoad();

                        case 2:
                            this.modelLoad(props);

                        case 3:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this);
        }));

        function init(_x) {
            return _ref2.apply(this, arguments);
        }

        return init;
    }()
};
